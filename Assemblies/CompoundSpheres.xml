<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CompoundSpheres</name>
    </assembly>
    <members>
        <member name="T:CompoundSpheres.IBuffer">
            <summary>
            a interface meant so the manager can control custom buffers of different types
            </summary>
        </member>
        <member name="M:CompoundSpheres.IBuffer.Dispose">
            <summary>
            disposes the custom buffer
            </summary>
        </member>
        <member name="M:CompoundSpheres.IBuffer.Update(System.Int32)">
            <summary>
            marks a tile to be refreshed
            </summary>
        </member>
        <member name="M:CompoundSpheres.IBuffer.Refresh">
            <summary>
            refreshes the buffer
            </summary>
        </member>
        <member name="T:CompoundSpheres.CustomBuffer`1">
            <summary>
            a class for managing a buffer efficiently
            </summary>
        </member>
        <member name="F:CompoundSpheres.CustomBuffer`1.Manager">
            <summary>
            the manager managing this custom buffer
            </summary>
        </member>
        <member name="F:CompoundSpheres.CustomBuffer`1.Buffer">
            <summary>
            the buffer this is managing
            </summary>
        </member>
        <member name="M:CompoundSpheres.CustomBuffer`1.Refresh">
            <summary>
            refreshes all of the data
            </summary>
        </member>
        <member name="M:CompoundSpheres.CustomBuffer`1.Update(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:CompoundSpheres.CustomBuffer`1.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:CompoundSpheres.BufferUtils">
            <summary>
            a class for managing buffers
            </summary>
        </member>
        <member name="M:CompoundSpheres.BufferUtils.SetBuffer``1(UnityEngine.GraphicsBuffer,System.Int32,System.Func{System.Int32,``0})">
            <summary>
            sets a buffer, updating values in the list ToUpdate, NOT efficent for updating buffers, only call this to create buffers
            </summary>
            <remarks>calling this function many times at once may lead to lag</remarks>
        </member>
        <member name="M:CompoundSpheres.BufferUtils.UpdateBuffer``1(UnityEngine.GraphicsBuffer,System.Collections.Generic.HashSet{System.Int32},System.Func{System.Int32,``0},System.Int32)">
            <summary>
            Updates a buffer
            </summary>
        </member>
        <member name="T:CompoundSpheres.DefaultSettings">
            <summary>
            stores default settings
            </summary>
        </member>
        <member name="M:CompoundSpheres.DefaultSettings.CartesianToCylindrical(CompoundSpheres.SphereManager,System.Single,System.Single,System.Single)">
            <summary>
            maps a x,y coordinate on a grid to a cylndrical coordinate, with height increasing the radius, X being PHI and y being the Z coordinate
            </summary>
        </member>
        <member name="M:CompoundSpheres.DefaultSettings.DefaultTextureIndex(CompoundSpheres.SphereTile)">
            <summary>
            all tiles will display the first texture in the array
            </summary>
        </member>
        <member name="M:CompoundSpheres.DefaultSettings.CylindricalRotation(CompoundSpheres.SphereTile)">
            <summary>
            Rotates objects on a cylinder away from their center, the center having the same Z coordinate
            </summary>
        </member>
        <member name="M:CompoundSpheres.DefaultSettings.CylindricalInitiation(CompoundSpheres.SphereManager)">
            <summary>
            creates a cylinder with diamater as the manager and length as the managers Cols
            </summary>
            <param name="Manager"></param>
        </member>
        <member name="M:CompoundSpheres.DefaultSettings.DefaultMode(CompoundSpheres.SphereManager)">
            <summary>
            always display colored textures by default
            </summary>
        </member>
        <member name="M:CompoundSpheres.DefaultSettings.DefaultRange(CompoundSpheres.SphereManager,System.Int32@,System.Int32@)">
            <summary>
            by default, render one half of the cylinder (which is facing the camera)
            </summary>
        </member>
        <member name="M:CompoundSpheres.DefaultSettings.DefaultScale(CompoundSpheres.SphereTile)">
            <summary>
            default tile size is One
            </summary>
        </member>
        <member name="M:CompoundSpheres.DefaultSettings.DefaultColor(CompoundSpheres.SphereTile)">
            <summary>
            default tile color is white
            </summary>
        </member>
        <member name="F:CompoundSpheres.DefaultSettings.DefaultFormat">
            <summary>
            default format in textures
            </summary>
        </member>
        <member name="P:CompoundSpheres.DefaultSettings.DefaultTexture">
            <summary>
            default texture is a circle
            </summary>
        </member>
        <member name="P:CompoundSpheres.DefaultSettings.DefaultMesh">
            <summary>
            the default mesh on the sphere
            </summary>
        </member>
        <member name="T:CompoundSpheres.IncompatibleHardwareException">
            <summary>
            Not all GPU'S support compute shaders or indirect mesh instancing, if that happens, throw this
            </summary>
            <remarks>
            compute shaders are also not supported by the built in render pipeline
            </remarks>
        </member>
        <member name="M:CompoundSpheres.IncompatibleHardwareException.#ctor">
            <inheritdoc/>
        </member>
        <member name="M:CompoundSpheres.IncompatibleHardwareException.#ctor(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:CompoundSpheres.IncompatibleHardwareException.#ctor(System.String,System.Exception)">
            <inheritdoc/>
        </member>
        <member name="T:CompoundSpheres.SphereManager">
            <summary>
            The Manager For Your Compound Sphere
            </summary>
        </member>
        <member name="P:CompoundSpheres.SphereManager.Item(System.Int32,System.Int32)">
            <summary>
            a spheretile at x and y coordinates
            </summary>
        </member>
        <member name="P:CompoundSpheres.SphereManager.Item(System.Int32)">
            <summary>
            a Row at an X position
            </summary>
        </member>
        <member name="P:CompoundSpheres.SphereManager.Rows">
            <summary>
            The X Axis
            </summary>
        </member>
        <member name="P:CompoundSpheres.SphereManager.Cols">
            <summary>
            The Y Axis
            </summary>
        </member>
        <member name="P:CompoundSpheres.SphereManager.TotalTiles">
            <summary>
            the total amount of tiles on the sphere
            </summary>
        </member>
        <member name="P:CompoundSpheres.SphereManager.Radius">
            <summary>
            Rows / 2PI
            </summary>
        </member>
        <member name="P:CompoundSpheres.SphereManager.Diameter">
            <summary>
            2 * Radius
            </summary>
        </member>
        <member name="P:CompoundSpheres.SphereManager.SphereTileMesh">
            <summary>
            The Mesh used, every tile has the same mesh
            </summary>
        </member>
        <member name="P:CompoundSpheres.SphereManager.Material">
            <summary>
            The material used, every tile has the same material
            </summary>
            <remarks>dont add custom buffers directly to this, instead use addcustombuffer, since the manager will manage the buffer for you</remarks>
        </member>
        <member name="M:CompoundSpheres.SphereManager.Destroy">
            <summary>
            destroys the sphere manager and its game object, and frees up all memory
            </summary>
        </member>
        <member name="M:CompoundSpheres.SphereManager.Clamp(System.Single,System.Single)">
            <summary>
            clamps a position + change to the X Axis
            </summary>
        </member>
        <member name="M:CompoundSpheres.SphereManager.DrawTiles(System.Int32)">
            <summary>
            all rows that are in the camera range draw their tiles
            </summary>
            <remarks>the camera x and y positions are the camera's position on the 2d grid, NOT its actual coordinates</remarks>
        </member>
        <member name="M:CompoundSpheres.SphereManager.DrawAllTiles">
            <summary>
            draws all tiles, even if they are not visible, NOT RECOMMENDED!
            </summary>
        </member>
        <member name="M:CompoundSpheres.SphereManager.SphereTilePosition(System.Single,System.Single,System.Single)">
            <summary>
            the 3D Position of a Position on the grid, along with a Height
            </summary>
        </member>
        <member name="M:CompoundSpheres.SphereManager.GetSphereTileRotation(CompoundSpheres.SphereTile)">
            <summary>
            gets the rotation of a spheretile
            </summary>
        </member>
        <member name="M:CompoundSpheres.SphereManager.SphereTileScale(CompoundSpheres.SphereTile)">
            <summary>
            the scale of a spheretile
            </summary>
        </member>
        <member name="M:CompoundSpheres.SphereManager.SphereTileColor(CompoundSpheres.SphereTile)">
            <summary>
            the color of a spheretile
            </summary>
        </member>
        <member name="M:CompoundSpheres.SphereManager.SphereTileTexture(CompoundSpheres.SphereTile)">
            <summary>
            the Index of the texture in the textures array that this spheretile has
            </summary>
            <param name="SphereTile"></param>
            <returns></returns>
        </member>
        <member name="M:CompoundSpheres.SphereManager.GetEnumerator">
            <summary>
            the sphere manager acts as a list of sphere rows
            </summary>
        </member>
        <member name="M:CompoundSpheres.SphereManager.ToString">
            <inheritdoc/>
        </member>
        <member name="M:CompoundSpheres.SphereManager.ToString(System.String,System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:CompoundSpheres.SphereManager.RefreshAll">
            <summary>
            refresh all of the matrixes, textures and colors
            </summary>
        </member>
        <member name="M:CompoundSpheres.SphereManager.RefreshScales">
            <summary>
            refresh the matrix array
            </summary>
        </member>
        <member name="M:CompoundSpheres.SphereManager.RefreshColors">
            <summary>
            refresh the color array
            </summary>
        </member>
        <member name="M:CompoundSpheres.SphereManager.RefreshTextures">
            <summary>
            refresh the texture array
            </summary>
        </member>
        <member name="M:CompoundSpheres.SphereManager.UpdateColor(System.Int32,System.Int32)">
            <summary>
            marks a tile's color to be refreshed
            </summary>
        </member>
        <member name="M:CompoundSpheres.SphereManager.UpdateColor(System.Int32)">
            <summary>
            marks a tile's color to be refreshed
            </summary>
        </member>
        <member name="M:CompoundSpheres.SphereManager.UpdateScale(System.Int32,System.Int32)">
            <summary>
            marks a tile's matrix to be refreshed
            </summary>
        </member>
        <member name="M:CompoundSpheres.SphereManager.UpdateScale(System.Int32)">
            <summary>
            marks a tile's matrix to be refreshed
            </summary>
        </member>
        <member name="M:CompoundSpheres.SphereManager.UpdateTexture(System.Int32,System.Int32)">
            <summary>
            marks a tile's texture to be refreshed
            </summary>
        </member>
        <member name="M:CompoundSpheres.SphereManager.UpdateTexture(System.Int32)">
            <summary>
            marks a tile's texture to be refreshed
            </summary>
        </member>
        <member name="M:CompoundSpheres.SphereManager.RefreshCustom(System.String)">
            <summary>
            refreshes a custom buffer
            </summary>
        </member>
        <member name="M:CompoundSpheres.SphereManager.UpdateCustom(System.String,System.Int32,System.Int32)">
            <summary>
            marks a tile's custom property to be updated
            </summary>
        </member>
        <member name="M:CompoundSpheres.SphereManager.UpdateCustom(System.String,System.Int32)">
            <summary>
            marks a tile's custom property to be updated
            </summary>
        </member>
        <member name="M:CompoundSpheres.SphereManager.AddCustomBuffer``1(System.String,CompoundSpheres.GetCustomData{``0},System.Int32)">
            <summary>
            adds a custom buffer to this sphererow, which is then accessed by the GPU
            </summary>
            <param name="Name">the name of the buffer in the custom shader, must be unique</param>
            <param name="getcustomdata">a function that returns a struct to be stored in the buffer</param>
            <param name="Size">the size of each variable in the buffer, in bytes. for example if you are storing floats it will be 4 because floats take up 4 bytes</param>
            <returns>a compute buffer, to update it call buffer.update and buffer.refresh</returns>
            <remarks>your compute buffer will be automatically released from memory once sphere is destroyed</remarks>
        </member>
        <member name="M:CompoundSpheres.SphereManager.AddCustomBuffer(CompoundSpheres.IBufferData)">
            <summary>
            a non-generic method of adding a custom buffer
            </summary>
        </member>
        <member name="T:CompoundSpheres.SphereManager.Creator">
            <summary>
            Creates Spheremanagers
            </summary>
        </member>
        <member name="M:CompoundSpheres.SphereManager.Creator.CreateSphereManager(System.Int32,System.Int32,CompoundSpheres.SphereManagerSettings,System.String)">
            <summary>
            Creates a sphere manager, cols and rows represent the size of the grid the manager displays
            </summary>
            <exception cref="T:System.ArgumentException">cols and rows must be above 0</exception>
            <remarks>this will create a game object with a sphere manager attached to it!</remarks>
        </member>
        <member name="T:CompoundSpheres.IBufferData">
            <summary>
            a interface so the manager can import custom buffers of different types
            </summary>
        </member>
        <member name="M:CompoundSpheres.IBufferData.GetBuffer(CompoundSpheres.SphereManager)">
            <summary>
            adds a custom buffer to a manager and returns it
            </summary>
        </member>
        <member name="M:CompoundSpheres.IBufferData.GetName">
            <summary>
            the name of the custom buffer
            </summary>
        </member>
        <member name="T:CompoundSpheres.CustomBufferData`1">
            <summary>
            a custom buffer configuration, which tells the sphere manager to add a new compute buffer
            </summary>
        </member>
        <member name="F:CompoundSpheres.CustomBufferData`1.getCustomData">
            <summary>
            a function that returns your custom data for each sphere tile
            </summary>
        </member>
        <member name="F:CompoundSpheres.CustomBufferData`1.Name">
            <summary>
            the name of this buffer, in your custom shader
            </summary>
        </member>
        <member name="F:CompoundSpheres.CustomBufferData`1.Size">
            <summary>
            the size of the data being stored, in bytes
            </summary>
        </member>
        <member name="M:CompoundSpheres.CustomBufferData`1.#ctor(System.String,System.Int32,CompoundSpheres.GetCustomData{`0})">
            <summary>
            a custom buffer configuration, which tells the sphere manager to add a new compute buffer
            </summary>
            <param name="Name">the name of this buffer, in your custom shader</param>
            <param name="Size">the size of the data being stored, in bytes</param>
            <param name="getCustomData">a function that returns your custom data for each sphere tile</param>
        </member>
        <member name="M:CompoundSpheres.CustomBufferData`1.GetBuffer(CompoundSpheres.SphereManager)">
            <inheritdoc/>
        </member>
        <member name="M:CompoundSpheres.CustomBufferData`1.GetName">
            <inheritdoc/>
        </member>
        <member name="T:CompoundSpheres.DisplayMode">
            <summary>
            the mode which indicates how tiles are displayed
            </summary>
        </member>
        <member name="F:CompoundSpheres.DisplayMode.ColorOnly">
            <summary>
            only the colors are displayed on each tile
            </summary>
        </member>
        <member name="F:CompoundSpheres.DisplayMode.TextureOnly">
            <summary>
            only the textures are displayed on each tile
            </summary>
        </member>
        <member name="F:CompoundSpheres.DisplayMode.ColoredTexture">
            <summary>
            the textures are displayed, and the color is applied over them
            </summary>
        </member>
        <member name="F:CompoundSpheres.DisplayMode.ColorAndTexture">
            <summary>
            the color is added to the texture
            </summary>
        </member>
        <member name="T:CompoundSpheres.GetCustomData`1">
            <summary>
            a function that returns a custom data
            </summary>
        </member>
        <member name="T:CompoundSpheres.GetSphereTilePosition">
            <summary>
            converts a X,Y position and height to a position on the Sphere
            </summary>
        </member>
        <member name="T:CompoundSpheres.GetSphereTileRotation">
            <summary>
            the rotation of any spheretile, position is made then the rotation is made
            </summary>
        </member>
        <member name="T:CompoundSpheres.GetSphereTileScale">
            <summary>
            the scale of a spheretile, called everytime its Row updates it
            </summary>
        </member>
        <member name="T:CompoundSpheres.GetSphereTileTexture">
            <summary>
            the Index of a spheretiles texture in the sphere managers texture array
            </summary>
        </member>
        <member name="T:CompoundSpheres.GetSphereTileColor">
            <summary>
            the color of a spheretile
            </summary>
        </member>
        <member name="T:CompoundSpheres.GetDisplayMode">
            <summary>
            if true, textures will be displayed on all tiles, if false only colors will be displayed
            </summary>
        </member>
        <member name="T:CompoundSpheres.GetCameraRange">
            <summary>
            the Range of Rows around the camera that draw their tiles
            </summary>
        </member>
        <member name="T:CompoundSpheres.Initiation">
            <summary>
            called once the manager is created
            </summary>
        </member>
        <member name="T:CompoundSpheres.SphereManagerSettings">
            <summary>
            The Settings of a sphere manager, only used when it is created, you cannot update it after
            </summary>
            <remarks>every single setting must be set! default settings are stored in <see cref="T:CompoundSpheres.DefaultSettings"/></remarks>
        </member>
        <member name="F:CompoundSpheres.SphereManagerSettings.getspheretileposition">
            <summary>
            converts a X,Y position and height to a position on the Sphere
            </summary>
        </member>
        <member name="F:CompoundSpheres.SphereManagerSettings.GetSphereTileRotation">
            <summary>
            the rotation of any spheretile, position is made then the rotation is made
            </summary>
        </member>
        <member name="F:CompoundSpheres.SphereManagerSettings.GetSphereTileScale">
            <summary>
            the scale of a spheretile, called everytime its Row updates it
            </summary>
        </member>
        <member name="F:CompoundSpheres.SphereManagerSettings.GetSphereTileTexture">
            <summary>
            the Index of a spheretiles texture in the sphere managers texture array
            </summary>
        </member>
        <member name="F:CompoundSpheres.SphereManagerSettings.GetSphereTileColor">
            <summary>
            the color of a spheretile
            </summary>
        </member>
        <member name="F:CompoundSpheres.SphereManagerSettings.SphereTileMesh">
            <summary>
            the mesh used to display tiles
            </summary>
        </member>
        <member name="F:CompoundSpheres.SphereManagerSettings.SphereTileMaterial">
            <summary>
            the Material of the meshes, must have the compound spheres shader to work!
            </summary>
        </member>
        <member name="F:CompoundSpheres.SphereManagerSettings.GetDisplayMode">
            <summary>
            how the textures and colors are rendered on each tile, called everytime they are drawn
            </summary>
        </member>
        <member name="F:CompoundSpheres.SphereManagerSettings.GetCameraRange">
            <summary>
            the Range of Rows around the camera that draw their tiles
            </summary>
        </member>
        <member name="F:CompoundSpheres.SphereManagerSettings.TextureArray">
            <summary>
            the array of textures the manager can display, a spheretile displays a texture at index getspheretiletexture
            </summary>
        </member>
        <member name="F:CompoundSpheres.SphereManagerSettings.CustomBuffers">
            <summary>
            a list of custom buffers this manager's shader has (Optional)
            </summary>
        </member>
        <member name="F:CompoundSpheres.SphereManagerSettings.BufferSize">
            <summary>
            the max distance between two tiles on the sphere to be included in the same batch to be sent to the gpu, if there are tiles in between, they will also be sent to the gpu and their data is recalculated!
            </summary>
        </member>
        <member name="F:CompoundSpheres.SphereManagerSettings.Initiation">
            <summary>
            called once the manager is created
            </summary>
        </member>
        <member name="M:CompoundSpheres.SphereManagerSettings.#ctor(CompoundSpheres.Initiation,CompoundSpheres.GetSphereTilePosition,CompoundSpheres.GetSphereTileRotation,CompoundSpheres.GetSphereTileScale,CompoundSpheres.GetSphereTileColor,CompoundSpheres.GetSphereTileTexture,CompoundSpheres.GetDisplayMode,UnityEngine.Texture2D[],UnityEngine.TextureFormat,UnityEngine.Mesh,UnityEngine.Material,CompoundSpheres.GetCameraRange,System.Collections.Generic.List{CompoundSpheres.IBufferData},System.Int32)">
            <summary>
            Settings for a sphere manager
            </summary>
            <param name="Initiation">the function called when the sphere manager is created</param>
            <param name="getSphereTilePosition">converts a x,y coordinate on a grid and a Height variable to a coordinate on the sphere</param>
            <param name="getSphereTileRotation">gets the rotation of a sphere tile, called once</param>
            <param name="getSphereTileScale">gets the scale of the tile, called everytime it is refreshed</param>
            <param name="getSphereTileColor">gets the color of the tile, called everytime it is refreshed</param>
            <param name="getSphereTileTexture">how the textures and colors are rendered on each tile, called everytime they are drawn</param>
            <param name="getdisplaymode">if true, tiles will display their textures, otherwise they only display their color, called everytime tiles are rendered</param>
            <param name="Textures">an array of textures that can be displayed, every texture must have same format provided and size</param>
            <param name="Format">The Texture format</param>
            <param name="mesh">the spheretile mesh, default quad</param>
            <param name="BufferSize">the max distance between two tiles on the sphere to be included in the same batch to be sent to the gpu, if there are tiles in between, they will also be sent to the gpu and their data is recalculated!</param>
            <param name="material">The Material of the Mesh</param>
            <param name="getCameraRange">gets the range of rows that are displayede around the cameraparam</param>
            <param name="custombuffers">a list of custom buffers this manager's shader has (Optional)</param>
            <remarks>the Material MUST have the compound sphere shader or another shader with same functionality</remarks>
        </member>
        <member name="M:CompoundSpheres.SphereManagerSettings.#ctor(CompoundSpheres.Initiation,CompoundSpheres.GetSphereTilePosition,CompoundSpheres.GetSphereTileRotation,CompoundSpheres.GetSphereTileScale,CompoundSpheres.GetSphereTileColor,CompoundSpheres.GetSphereTileTexture,CompoundSpheres.GetDisplayMode,UnityEngine.Texture2DArray,UnityEngine.Mesh,UnityEngine.Material,CompoundSpheres.GetCameraRange,System.Collections.Generic.List{CompoundSpheres.IBufferData},System.Int32)">
            <summary>
            Settings for a sphere manager
            </summary>
            <param name="Initiation">the function called when the sphere manager is created</param>
            <param name="getSphereTilePosition">converts a x,y coordinate on a grid and a Height variable to a coordinate on the sphere</param>
            <param name="getSphereTileRotation">gets the rotation of a sphere tile, called once</param>
            <param name="getSphereTileScale">gets the scale of the tile, called everytime it is refreshed</param>
            <param name="getSphereTileColor">gets the color of the tile, called everytime it is refreshed</param>
            <param name="getSphereTileTexture">gets the index of a texture in the Textures Array, of the tile, called everytime it is refreshed</param>
            <param name="BufferSize">the max distance between two tiles on the sphere to be included in the same batch to be sent to the gpu, if there are tiles in between, they will also be sent to the gpu and their data is recalculated!</param>
            <param name="getdisplaymode">how the textures and colors are rendered on each tile, called everytime they are drawn</param>
            <param name="Textures">an array of textures that can be displayed, you must create this and apply it first</param>
            <param name="mesh">the spheretile mesh, default quad</param>
            <param name="material">The Material of the Mesh</param>
            <param name="custombuffers">a list of custom buffers this manager's shader has (Optional)</param>
            <param name="getCameraRange">gets the range of rows that are displayede around the cameraparam</param>
            <remarks>the Material MUST have the compound sphere shader or another shader with same functionality</remarks>
        </member>
        <member name="M:CompoundSpheres.SphereManagerSettings.#ctor(CompoundSpheres.SphereManagerSettings,UnityEngine.Mesh)">
            <summary>
            copies settings from another setting, allows you to also add a new mesh since that is the most commonly modified setting
            </summary>
        </member>
        <member name="T:CompoundSpheres.SphereRow">
            <summary>
            sphere rows control the displaying of tiles
            </summary>
        </member>
        <member name="F:CompoundSpheres.SphereRow.SphereManager">
            <summary>
            the manager of this row
            </summary>
        </member>
        <member name="P:CompoundSpheres.SphereRow.Item(System.Int32)">
            <summary>
            get a sphere tile at this row and column i
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="P:CompoundSpheres.SphereRow.Cols">
            <summary>
            the number of tiles in this row
            </summary>
        </member>
        <member name="F:CompoundSpheres.SphereRow.Row">
            <summary>
            the X coordinate of this row
            </summary>
        </member>
        <member name="P:CompoundSpheres.SphereRow.Properties">
            <summary>
            the material properties for this specific row
            </summary>
            <remarks>dont add custom buffers directly to this, instead use Manager.addcustombuffer, since the manager will manage the buffer for you </remarks>
        </member>
        <member name="M:CompoundSpheres.SphereRow.DrawTiles">
            <summary>
            draw the spheretiles
            </summary>
        </member>
        <member name="M:CompoundSpheres.SphereRow.Equals(CompoundSpheres.SphereRow)">
            <summary>
            returns true if both rows are managed by the same manager and are at the same X cord
            </summary>
        </member>
        <member name="M:CompoundSpheres.SphereRow.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:CompoundSpheres.SphereRow.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:CompoundSpheres.SphereRow.CompareTo(CompoundSpheres.SphereRow)">
            <summary>
            returns 1 if the X cord is bigger then the other, 0 if both are the same and -1 if other's x cord is bigger
            </summary>
        </member>
        <member name="M:CompoundSpheres.SphereRow.ToString">
            <inheritdoc/>
        </member>
        <member name="M:CompoundSpheres.SphereRow.ToString(System.String,System.IFormatProvider)">
            <summary>
            creates a string that represents this row
            </summary>
        </member>
        <member name="M:CompoundSpheres.SphereRow.op_Equality(CompoundSpheres.SphereRow,CompoundSpheres.SphereRow)">
            <summary>
            returns true if both rows are managed by the same manager and are at the same X cord
            </summary>
        </member>
        <member name="M:CompoundSpheres.SphereRow.op_Inequality(CompoundSpheres.SphereRow,CompoundSpheres.SphereRow)">
            <summary>
            returns true if both rows are not managed by the same manager or are at different X cords
            </summary>
        </member>
        <member name="M:CompoundSpheres.SphereRow.op_GreaterThan(CompoundSpheres.SphereRow,CompoundSpheres.SphereRow)">
            <summary>
            returns true if the x cord is bigger
            </summary>
        </member>
        <member name="M:CompoundSpheres.SphereRow.op_LessThan(CompoundSpheres.SphereRow,CompoundSpheres.SphereRow)">
            <summary>
            returns true if the x cord is smaller
            </summary>
        </member>
        <member name="M:CompoundSpheres.SphereRow.op_GreaterThanOrEqual(CompoundSpheres.SphereRow,CompoundSpheres.SphereRow)">
            <summary>
            returns true if the x cord is equal or bigger
            </summary>
        </member>
        <member name="M:CompoundSpheres.SphereRow.op_LessThanOrEqual(CompoundSpheres.SphereRow,CompoundSpheres.SphereRow)">
            <summary>
            returns true if the x cord is equal or smaller
            </summary>
        </member>
        <member name="T:CompoundSpheres.SphereTile">
            <summary>
            a tile on a sphere, storing its position in 3d space, x and y coordinates on its grid, and rotation
            </summary>
        </member>
        <member name="F:CompoundSpheres.SphereTile.X">
            <summary>
            the X position on the grid, which is its row
            </summary>
        </member>
        <member name="F:CompoundSpheres.SphereTile.Y">
            <summary>
            the Y position on the grid, which is its column
            </summary>
        </member>
        <member name="F:CompoundSpheres.SphereTile.Rotation">
            <summary>
            the rotation
            </summary>
        </member>
        <member name="F:CompoundSpheres.SphereTile.Position">
            <summary>
            the Position in 3D space
            </summary>
        </member>
        <member name="P:CompoundSpheres.SphereTile.Scale">
            <summary>
            the scale of this tile, this is not constant and can change
            </summary>
        </member>
        <member name="P:CompoundSpheres.SphereTile.Color">
            <summary>
            the color of this tile, represented by vector4
            </summary>
        </member>
        <member name="P:CompoundSpheres.SphereTile.TextureIndex">
            <summary>
            the texture index of this sphere tile in the managers texture array
            </summary>
        </member>
        <member name="F:CompoundSpheres.SphereTile.Row">
            <summary>
            the Row this tile is Im
            </summary>
        </member>
        <member name="P:CompoundSpheres.SphereTile.Manager">
            <summary>
            the Manager of this tile
            </summary>
        </member>
        <member name="M:CompoundSpheres.SphereTile.ToString">
            <inheritdoc/>
        </member>
        <member name="M:CompoundSpheres.SphereTile.ToString(System.String,System.IFormatProvider)">
            <summary>
            returns a string representing this sphere tile
            </summary>
        </member>
        <member name="M:CompoundSpheres.SphereTile.CompareTo(CompoundSpheres.SphereTile)">
            <summary>
            if the X coordinates are different, compares them and returns the result, otherwise it compares the Y coordinates and returns the result
            </summary>
        </member>
        <member name="M:CompoundSpheres.SphereTile.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:CompoundSpheres.SphereTile.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:CompoundSpheres.SphereTile.Equals(CompoundSpheres.SphereTile)">
            <summary>
            returns true if both coordinates are the same and are managed by the same manager
            </summary>
        </member>
        <member name="M:CompoundSpheres.SphereTile.op_Implicit(CompoundSpheres.SphereTile)~System.Int32">
            <summary>
            the 1D coordinates of a sphere tile
            </summary>
        </member>
        <member name="M:CompoundSpheres.SphereTile.op_Implicit(CompoundSpheres.SphereTile)~UnityEngine.Matrix4x4">
            <summary>
            a Matrix4x4 representing the position, rotation of the sphere tile
            </summary>
        </member>
        <member name="M:CompoundSpheres.SphereTile.op_Equality(CompoundSpheres.SphereTile,CompoundSpheres.SphereTile)">
            <summary>
            returns true if both coordinates are the same and are managed by the same manager
            </summary>
        </member>
        <member name="M:CompoundSpheres.SphereTile.op_Inequality(CompoundSpheres.SphereTile,CompoundSpheres.SphereTile)">
            <summary>
            returns true if both coordinates are different or are managed by different managers
            </summary>
        </member>
        <member name="M:CompoundSpheres.SphereTile.op_GreaterThan(CompoundSpheres.SphereTile,CompoundSpheres.SphereTile)">
            <inheritdoc/>
        </member>
        <member name="M:CompoundSpheres.SphereTile.op_LessThan(CompoundSpheres.SphereTile,CompoundSpheres.SphereTile)">
            <inheritdoc/>
        </member>
        <member name="M:CompoundSpheres.SphereTile.op_GreaterThanOrEqual(CompoundSpheres.SphereTile,CompoundSpheres.SphereTile)">
            <inheritdoc/>
        </member>
        <member name="M:CompoundSpheres.SphereTile.op_LessThanOrEqual(CompoundSpheres.SphereTile,CompoundSpheres.SphereTile)">
            <inheritdoc/>
        </member>
    </members>
</doc>
